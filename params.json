{
  "name": "Apex Style Guide",
  "tagline": "Developing Salesforce together",
  "body": "# Rapid Recovery Apex Style Guide\r\n<!-- MarkdownTOC depth=0 autolink=true autoanchor=true bracket=round -->\r\n\r\n- [Intro](#intro)\r\n  - [Goals](#goals)\r\n  - [Sources](#sources)\r\n- [Basics](#basics)\r\n  - [Special characters](#special-characters)\r\n    - [Whitespace](#whitespace)\r\n    - [Special escape sequences](#special-escape-sequences)\r\n    - [Other Non-ASCII Characters](#other-non-ascii-characters)\r\n- [Structure](#structure)\r\n  - [Indentation](#indentation)\r\n  - [New-lines and spaces](#new-lines-and-spaces)\r\n  - [Prefer Explicit Declarations](#prefer-explicit-declarations)\r\n  - [`@isTest`](#istest)\r\n  - [Capitalization](#capitalization)\r\n  - [Commenting](#commenting)\r\n  - [Example](#example)\r\n- [SOQL](#soql)\r\n- [Apex-Specific SObject Constructor Syntax](#apex-specific-sobject-constructor-syntax)\r\n- [Test.startTest() and Test.stopTest()](#teststarttest-and-teststoptest)\r\n- [Naming Conventions](#naming-conventions)\r\n  - [Class and Trigger](#class-and-trigger)\r\n  - [Methods](#methods)\r\n  - [Test classes](#test-classes)\r\n\r\n<!-- /MarkdownTOC -->\r\n\r\n<a name=\"intro\"></a>\r\n## Intro\r\nThis document attempts to explain the basic styles and patterns that are used in the Rapid Recovery Salesforce codebase. New code should try to conform to these standards so that it is as easy to maintain as existing code. Of course every rule has an exception, but it's important to know the rules nonetheless. \r\n\r\n<a name=\"goals\"></a>\r\n### Goals\r\nThe goal of this style guide is like that of any other style guide. Every developer has an opinion as to what makes a codebase clean, objective, and efficient, this style guide was founded on practiced principals within the [Salesforce community](http://salesforce.stackexchange.com/a/54678/10834), and collaborated on GitHub here: [SalesforceStyleGuide](https://github.com/PolarisProject/salesforceStyleGuide).  As long as there's some logic behind that beauty, no one is right or wrong.  But it's important to have a standard so that:\r\n\r\n1. New and old developers, and outside contractors of all sorts can easily read, understand and maintain our growing code base.\r\n2. Code merges are easy to handle and are content-ful, not style-ful.\r\n\r\nSee the Internet for more arguments about why style guides are important and useful things and not just a waste of time.\r\n\r\n<a name=\"sources\"></a>\r\n### Sources\r\nSince Apex is largely a Java and C# spin-off, this guide is founded on [Google Java Style Guide](http://google-styleguide.googlecode.com/svn/trunk/javaguide.html) first, then C# where those do not apply. Anything not available from those sources is determined within the community and the dev team\r\n\r\nThis is still a living document so expect changes.\r\n\r\n<a name=\"basics\"></a>\r\n## Basics\r\n<a name=\"special-characters\"></a>\r\n### Special characters\r\n<a name=\"whitespace\"></a>\r\n#### Whitespace\r\nThe only permissible whitespace characters in source code are newline and space (0x20).  Inside of a string literal, only a space is allowed.  Line must not end with spaces (`/ +$/` must not match anything in the file).  Classes should all end with a newline.\r\n\r\n<a name=\"special-escape-sequences\"></a>\r\n#### Special escape sequences\r\nFor any character that has a special escape sequence (`\\b`, `\\t`, `\\n`, `\\f`, `\\r`, `\\\"`, `\\'` and `\\\\`), that sequence is used rather than the corresponding octal (e.g. `\\012`) or Unicode (e.g. `\\u000a`) escape.\r\n\r\n<a name=\"other-non-ascii-characters\"></a>\r\n#### Other Non-ASCII Characters\r\nFor the remaining non-ASCII characters, either the actual Unicode character (e.g. `âˆž`) or the equivalent Unicode escape (e.g. `\\u221e`) is used, depending only on which makes the code easier to read and understand.\r\n\r\n  > Tip: In the Unicode escape case, and occasionally even when actual Unicode characters are used, an explanatory comment can be very helpful.\r\n\r\n<a name=\"structure\"></a>\r\n## Structure\r\n\r\nThe ordering of the members of a class can have a great effect on learnability, but there is no single correct recipe for how to do it. Different classes may order their members differently.\r\n\r\nWhat is important is that each class order its members in some logical order, which its maintainer could explain if asked. For example, new methods are not just habitually added to the end of the class, as that would yield \"chronological by date added\" ordering, which is not a logical ordering.\r\n\r\n<a name=\"indentation\"></a>\r\n### Indentation\r\nAll blocks of code should be indented with 2 spaces.  Spaces, not tabs, to ensure that it looks the same on everyone's screen and doesn't waste horizontal space.\r\n\r\n<a name=\"new-lines-and-spaces\"></a>\r\n### New-lines and spaces\r\nUse vertical whitespace as appropriate.  Don't be afraid to separate blocks of code.\r\n\r\nPrefer placing comments on a line by themselves.\r\n\r\nOpen braces should have a space before them and not a newline.  The matching close brace should line up with the start of the opening brace's line.\r\n\r\n`else`s and `else if`s do not get a new-line before them.  Neither do `catch`es or `while`s in a `do...while` loop.\r\n\r\nThe parenthetical clause in `if`, `while`, `do`, `catch`, etc., statements should be preceded and followed by a single space.\r\n\r\nIn method definitions, there should be no space before the open parenthesis, and one space after.\r\n\r\nIn method calls and definitions, there should not be whitespace between the name of the method and the open parenthesis.\r\n\r\nA single space should separate binary operators from the surrounding elements (e.g., `+`, `||`, `=`, `>=`).  Unary operators (`!`, `-`) should be attached to their parameters.  A colon inside a `for each` loop (e.g., `for (Contact cnt : contacts) {`) should have one space on either side.  There should be no whitespace before commas, and one space after (e.g., `System.debug(LoggingLevel.INFO, 'fsdfs');`).\r\n\r\nIf using C#-style properties, code should follow the following rules:\r\n\r\n * Always declare the getter, then the setter.\r\n * If there is no logic, it should read `{ get; set; }`.\r\n * If there is logic, there should be a new-line before each open-brace, and before and after each closed-brace.\r\n * If one clause has logic and one does not, place the clause without logic on its own line.\r\n\r\n<a name=\"prefer-explicit-declarations\"></a>\r\n### Prefer Explicit Declarations\r\nAlways specify:\r\n\r\n* `global`/`public`/`private` modifiers - prefer `private`, and if possible, `static`\r\n* `with sharing`/`without sharing`\r\n* `this` when calling local methods or setting local members/properties.\r\n\r\n<a name=\"istest\"></a>\r\n### `@isTest`\r\nIn a test method, use the `@isTest` attribute instead of the `testmethod` modifier.\r\n\r\n<a name=\"capitalization\"></a>\r\n### Capitalization\r\n\r\nWe follow the Java standard of capitalization with the listed exceptions.  That means that statements (`for`, `if`, etc.) should be lowercase, constants should be `UPPER_CASE_WITH_UNDERSCORES`, classes and class-level variables should be declared as `UpperCamelCase`, and methods, parameters and local variables should all be declard as `lowerCamelCase`.\r\n\r\nNative Apex methods and classes should generally be referenced as written in official Salesforce documentation.  This means that schemas and classes are `UpperCamelCase` and methods are `lowerCamelCase`.  The only deviation from this rule is `SObject` which should be written as such (in the documentation, it is usually written `sObject` which does not conform to this style guide and should not be used).\r\n\r\nHowever, when referencing any metadata (SObject, SObjectField, FieldSet, Action, Class, Page, etc.), use the declared capitalization.  Even when referencing a method, field, etc., that is not capitalized according to these rules, still use the declared capitalization.\r\n\r\n<a name=\"commenting\"></a>\r\n### Commenting\r\nWhen commenting functions, the `JsDoc` doc style has been adapted to create a `RapRec` style. This uses the `/**` comment block and includes a function description followed by an empty line and the following tags respectively: `@author`, `@date`, `@context`, `@param`, `@return`\r\n\r\nThe following example outlines a typical method comment block. \r\n\r\n```\r\n/**\r\n * This is a test method, it does nothing\r\n *\r\n * @author     nworth\r\n * @date       21-Jul-2016\r\n * @context    public\r\n * @param      Map<Id,Account>  a\r\n * @param      List<Contact>    b\r\n * @return     void\r\n */\r\npublic void test(Map<Id,Account> a, List<Contact> b) {\r\n   return a + b;\r\n}\r\n```\r\n\r\n_*NOTE:* See [Comment Style Guide Setup](http://kb.raprec.com/public/comment-style-guide-setup/) for a guide to setup the [DoxyDoxygen](http://20tauri.free.fr/DoxyDoxygen/v2/page_overview.php) add-on for easy commenting_\r\n\r\n<a name=\"example\"></a>\r\n### Example\r\n\r\n```java\r\npublic class MyClass {\r\n\r\n    private Contact internallyUsedContact { get; set; }\r\n\r\n    public Integer calculatedInteger {\r\n        get {\r\n            return 5;\r\n        }\r\n        set {\r\n            this.internallyUsedContact = [SELECT Id\r\n                FROM Contact \r\n                WHERE Number_of_Peanuts__c > :value \r\n                LIMIT 1\r\n            ];\r\n        }\r\n    }\r\n\r\n    private Id contactId {\r\n        get;\r\n        set {\r\n            System.debug('Why do this?');\r\n            this.contactId = value;\r\n        }\r\n    }\r\n\r\n    public void foo(Integer bar) {\r\n        if (bar == 3) {\r\n            // Diane often asks when bar is 3.\r\n            System.debug(this.debugCode(bar) + ' - hi there!');\r\n            return;\r\n        } else if (bar > 7) {\r\n            List<Integer> wasteOfSpace = new List<Integer>();\r\n            do {\r\n                wasteOfSpace.add(this.calculatedInteger);\r\n            } while (wasteOfSpace.size() < 5);\r\n        } else {\r\n            try {\r\n                UPSERT v;\r\n            } catch (Exception ex) {\r\n                handleException(ex);\r\n            }\r\n        }\r\n\r\n        for (Integer i : wasteOfSpace) {\r\n            System.debug('Here\\'s an integer! ' + i);\r\n        }\r\n    }\r\n\r\n}\r\n```\r\n\r\n\r\n<a name=\"soql\"></a>\r\n## SOQL\r\n\r\nIn general, SOQL should be declared inline where it is used.  In some cases, like when referencing FieldSets, it's necessary to build SOQL queries dynamically.  The same rules will generally apply.\r\n\r\nSOQL keywords (e.g., `SELECT`, `WHERE`, `TODAY`) should always be written in `ALL CAPS`.  Objects, fields and bind variables should be referenced as declared.  Each clause of the SOQL Query should be on its own line so that finding what changed in a diff is easier.  That is, each `SELECT`, `FROM`, `WHERE`, `AND`, `OR`, `GROUP BY`, `HAVING`, `ROLL UP`, `ORDER BY`, etc., with the exception of the first `SELECT` should start a new line.  That line should start in the same column as the most relevant `SELECT`.\r\n\r\nLong lists of fields in a `SELECT` clause should be ordered in a logical manner and broken to fit within page width, with subsequent lines aligned with the first field.  Always select `Id`, and always select it first.\r\n\r\nExample (in context):\r\n\r\n```\r\nString typeToSelect = 'abcde';\r\nList<Contact> cnts = [SELECT Id, FirstName, LastName, Phone, Email,\r\n                             MailingCity, MailingState,\r\n                             (SELECT Id, ActivityDate, Origin, Type,\r\n                                     WhatId, What.Name, RecordTypeId\r\n                              FROM ActivityHistories\r\n                              WHERE Type = :typeToSelect)\r\n                      FROM Contact\r\n                      WHERE CreatedDate >= TODAY];\r\n```\r\n\r\n<a name=\"apex-specific-sobject-constructor-syntax\"></a>\r\n## Apex-Specific SObject Constructor Syntax\r\nWhen creating an SObject, generally prefer the Apex-specific syntax wherein all fields can be initialized from the constructor.  When using this syntax, choose a different line for each property so that diff-ing and versioning is easier.\r\n\r\nExample:\r\n\r\n```\r\nContact c = new Contact(RecordTypeId = CONTACT_RECORDTYPE_ID,\r\n                        FirstName = firstName,\r\n                        LastName = surname,\r\n                        MailingCountry = DEFAULT_COUNTRY\r\n                       );\r\n```\r\n\r\n<a name=\"teststarttest-and-teststoptest\"></a>\r\n## Test.startTest() and Test.stopTest()\r\nWhen writing test cases, always use `Test.startTest();` and `Test.stopTest();`.  Do not indent the code between those method calls, but do use one line of vertical whitespace above and below those method calls to seprate those lines from surrounding code.\r\n\r\n<a name=\"naming-conventions\"></a>\r\n## Naming Conventions\r\nAll method name should reflect the scope of the method itself with respect to its namespace. Method names should not be derived by the feature scope or overarching functionality.\r\n\r\n#### Private\r\nIf a method is private to its class then it should be prefixed with an underscore (`_`).\r\n\r\n#### Boolean\r\nIf the method is returning a `Boolean` response, then it should be prefixed with `is` or `has`\r\n\r\n<a name=\"class-and-trigger\"></a>\r\n### Class and Trigger\r\nName a class or trigger after what it does.  Triggers should be verbs and end with `Trigger` (e.g., `SyncCaseToplineWithDescriptionTrigger`).  Controllers and Controller Extensions should end with the word `Controller`.\r\n\r\n<a name=\"methods\"></a>\r\n### Methods\r\nMethods should all be verbs.  Getters and setters should have no side effects (with the exception of setting up cached values and/or logging), and should begin with `get` or `set`.\r\n\r\n<a name=\"test-classes\"></a>\r\n### Test classes\r\nTest classes should be named `TEST_ClassUnderTest`.  If the test is not a unit-level test but instead a broader test case, it it should be named `TEST_StuffThatsGenerallyBeingTested`.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}